{"version":3,"file":"static/webpack/static/development/pages/userprofile.js.fc48d8e843f8706095ba.hot-update.js","sources":["webpack:///./pages/items.js"],"sourcesContent":["import Layout from \"./components/layout\";\nimport fetch from \"isomorphic-unfetch\";\n\nimport Link from \"next/link\";\nimport {\n  Grommet,\n  Heading,\n  Anchor,\n  Text,\n  Box,\n  Layer,\n  Image,\n  Button,\n  Tab,\n  Tabs\n} from \"grommet\";\nimport { Card, Tag } from \"grommet-controls\";\nimport { dark } from \"grommet/themes\";\nimport { Disposer } from \"bluebird\";\nimport { IconButton } from \"grommet-controls/components\";\nimport { SubtractCircle } from \"grommet-icons\";\nimport { isContinueStatement } from \"@babel/types\";\n\nconst Items = ({ items }) => {\n  return (\n    <Grommet theme={dark}>\n      <Layout>\n        <Tabs>\n          <Tab title=\"All Items\">\n            <Box direction=\"row\" wrap=\"true\" alignContent=\"around\" pad=\"large\">\n              {items.map(item => (\n                <Card\n                  basis=\"medium\"\n                  animation=\"fadeIn\"\n                  background=\"dark-1\"\n                  elevation=\"xxsmall\"\n                  gap=\"medium\"\n                  margin=\"small\"\n                >\n                  <Card.CardTitle color=\"brand\">{item.name}</Card.CardTitle>\n                  <Card.CardContent color=\"dark-1\">\n                    <Box\n                      direction=\"row\"\n                      border={{ color: \"brand\", size: \"large\" }}\n                      pad=\"medium\"\n                      round=\"small\"\n                    >\n                      <Box height=\"small\" width=\"medium\">\n                        <Image fit=\"cover\" src={item.url} />\n                      </Box>\n                    </Box>\n                    <Text>{item.description}</Text>\n                    <Text>${item.price}</Text>\n                    <Tag label={item.category} />\n                  </Card.CardContent>\n                </Card>\n              ))}\n            </Box>\n          </Tab>\n          <Tab title=\"Equipment\">\n            <Box direction=\"row\" wrap=\"true\" alignContent=\"around\" pad=\"large\">\n              {items.map(item => {\n                if (item.category === \"equipment\") {\n                  <Card\n                    basis=\"medium\"\n                    animation=\"fadeIn\"\n                    background=\"dark-1\"\n                    elevation=\"xxsmall\"\n                    gap=\"medium\"\n                    margin=\"small\"\n                  >\n                    <Card.CardTitle color=\"brand\">{item.name}</Card.CardTitle>\n                    <Card.CardContent color=\"dark-1\">\n                      <Box\n                        direction=\"row\"\n                        border={{ color: \"brand\", size: \"large\" }}\n                        pad=\"medium\"\n                        round=\"small\"\n                      >\n                        <Box height=\"small\" width=\"medium\">\n                          <Image fit=\"cover\" src={item.url} />\n                        </Box>\n                      </Box>\n                      <Text>{item.description}</Text>\n                      <Text>${item.price}</Text>\n                      <Tag label={item.category} />\n                    </Card.CardContent>\n                  </Card>;\n                }\n              })}\n            </Box>\n          </Tab>\n        </Tabs>\n      </Layout>\n    </Grommet>\n  );\n};\n\nItems.getInitialProps = async ({ req }) => {\n  const res = await fetch(\"http://localhost:8080/api/items\");\n  // console.log(\"ressssss\", res)\n  const json = await res.json();\n  return { items: json };\n};\n\nexport default Items;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAvBA;AA6BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAGA;AAHA;AAIA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAMA;;;;A","sourceRoot":""}