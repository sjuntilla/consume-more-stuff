{"version":3,"file":"static/webpack/static/development/pages/itemform.js.e43c9327f1d6e1c25568.hot-update.js","sources":["webpack:///./pages/itemform.js"],"sourcesContent":["import Layout from './components/layout';\nimport React from \"react\";\nimport { Component } from \"react\";\nimport { Box, Form, FormField, Select, Button } from \"grommet\";\n//should only show when user is logged in\n\nclass AddItem extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            description: \"\",\n            price: \"\",\n            category: \"\"\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        console.log(\"-----> ITEM STATE\", this.state);\n        fetch(\"http://localhost:8080/api/items\", {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                name: this.state.name,\n                description: this.state.description,\n                price: this.state.price,\n                category: this.state.category\n            })\n        })\n            .then(() => {\n                console.log(\"ADDED ITEM TOOOOOO ITEM LIST\")\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    }\n\n    handleChange = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n    render() {\n        return (\n            <Layout>\n                <Form onSubmit={this.handleSubmit}>\n                    <FormField\n                        onChange={this.handleChange}\n                        name=\"name\"\n                        label=\"Product Name\"\n                        required={true}\n                    />\n                    <FormField\n                        onChange={this.handleChange}\n                        name=\"description\"\n                        label=\"Product Description\"\n                        required={true}\n                    />\n                    <FormField\n                        onChange={this.handleChange}\n                        name=\"price\"\n                        label=\"Product Price\"\n                        required={true}\n                    />\n                    <Select\n                        placeholder=\"Category\"\n                        onChange={this.handleChange}\n                        category={this.state}\n                        options={[\"WELLNESS\", \"OFFICE\", \"ACCESSORIES\"]}\n                        onChange={({ option }) => this.setState({ value: option })}\n                        name=\"category\"\n                        required={true}\n                    />\n                    {/* <Select\n                        multiple\n                        closeOnChange={false}\n                        placeholder=\"select an option...\"\n                        selected={selected}\n                        options={options}\n                        dropHeight=\"medium\"\n                        onClose={() =>\n                            this.setState({\n                                options: options.sort((p1, p2) => {\n                                    const p1Exists = selected.includes(p1);\n                                    const p2Exists = selected.includes(p2);\n\n                                    if (!p1Exists && p2Exists) {\n                                        return 1;\n                                    }\n                                    if (p1Exists && !p2Exists) {\n                                        return -1;\n                                    }\n                                    return p1.localeCompare(p2, undefined, {\n                                        numeric: true,\n                                        sensitivity: \"base\"\n                                    });\n                                })\n                            })\n                        }\n                        onChange={({ selected: nextSelected }) => {\n                            this.setState({ selected: nextSelected });\n                        }}\n                    >\n                        {(option, index) => (\n                            <Option\n                                value={option}\n                                selected={selected.indexOf(index) !== -1}\n                            />\n                        )} */}\n\n                    <Button type=\"submit\" label=\"AddItem\" primary={true} />\n\n                </Form>\n            </Layout>\n        );\n    }\n}\nexport default AddItem;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAoCA;AAGA;AACA;AAtCA;AACA;AACA;AACA;AACA;AAJA;AAMA;AARA;AASA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AANA;AAcA;AACA;AAEA;AACA;AACA;;;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAJA;AAKA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AA8CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AAlHA;AACA;AAmHA;;;;A","sourceRoot":""}